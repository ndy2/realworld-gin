// Code generated by MockGen. DO NOT EDIT.
// Source: internal/profile/app/logic.go
//
// Generated by this command:
//
//	mockgen -source=internal/profile/app/logic.go -destination=internal/profile/app/logic_mock.go -package=app
//

// Package app is a generated GoMock package.
package app

import (
	dto "ndy/realworld-gin/internal/profile/dto"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLogic is a mock of Logic interface.
type MockLogic struct {
	ctrl     *gomock.Controller
	recorder *MockLogicMockRecorder
	isgomock struct{}
}

// MockLogicMockRecorder is the mock recorder for MockLogic.
type MockLogicMockRecorder struct {
	mock *MockLogic
}

// NewMockLogic creates a new mock instance.
func NewMockLogic(ctrl *gomock.Controller) *MockLogic {
	mock := &MockLogic{ctrl: ctrl}
	mock.recorder = &MockLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogic) EXPECT() *MockLogicMockRecorder {
	return m.recorder
}

// GetProfile mocks base method.
func (m *MockLogic) GetProfile(currentUserId, currentUserProfileId int, currentUsername, targetUsername string) (dto.GetProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", currentUserId, currentUserProfileId, currentUsername, targetUsername)
	ret0, _ := ret[0].(dto.GetProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockLogicMockRecorder) GetProfile(currentUserId, currentUserProfileId, currentUsername, targetUsername any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockLogic)(nil).GetProfile), currentUserId, currentUserProfileId, currentUsername, targetUsername)
}
